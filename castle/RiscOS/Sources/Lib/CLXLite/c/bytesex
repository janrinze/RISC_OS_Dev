/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 *
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 *
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */
/*
  Title:        host - endianness functions
  Copyright:    (C) 2009, RISC OS Open Limited
*/

#include <stdlib.h>
#include "bytesex.h"

static const int endian = 1;

static int reverse = 0;

bytesex_requirement bytesex_host(void)
{
  return (*(char*)&endian) == '\0' ? bytesex_WANT_BIG_ENDIAN : bytesex_WANT_LITTLE_ENDIAN;
}

void bytesex_reverse(int state)
{
  reverse = state != 0;
}

int bytesex_reversing(void)
{
  return reverse;
}

int bytesex_reverse_auto(bytesex_requirement mode)
{
  reverse = mode != bytesex_host();

  return reverse;
}

int32 bytesex_hostval(int32 value)
{
  if (reverse)
  {
#ifdef __riscos
    int temp;

    /* Taken from the ARM v4 ARM. ARM v6 gives us a REV instruction, which would be better... */
#ifdef __CC_NORCROFT
    __asm
    {
        EOR     temp, value, value, ROR #16
        BIC     temp, temp, #0x00FF0000
        MOV     value, value, ROR #8
        EOR     value, value, temp, LSR #8
    }
#else /* assume GCC */
    __asm__
    (
        "EOR     %1, %0, %0, ROR #16\n\t"
        "BIC     %1, %1, #0x00FF0000\n\t"
        "MOV     %0, %0, ROR #8\n\t"
        "EOR     %0, %0, %1, LSR #8"
        : "+r" (value), "=r" (temp)
    );
#endif
#else
#warning _UNSUPPORTED_SYSTEM_IN_CLX_BYTESEX_C_
#endif
  }
  return value;
}
