/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 *
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 *
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */
/* >err.c
 * Copyright © 2009, RISC OS Open Ltd.
 * All rights reserved.
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <stdbool.h>
#include <string.h>
#include "err.h"


static char prog_name[256] = "";
static char *err_format = NULL;
static char *err_extra  = NULL;
static bool err_inited  = false;

void err_init(const char *prgname)
{
  snprintf(prog_name, sizeof(prog_name), "%s", prgname);
  err_inited = true;
}


void err_report(const char *format, ...)
{
  va_list va;

  fprintf(stderr, "%s: ", prog_name);
  va_start(va, format);
  vfprintf(stderr, format, va);
  va_end(va);
  fprintf(stderr, "\n");
}


void err_fail(const char *format, ...)
{
  va_list va;

  fprintf(stderr, "%s: ", prog_name);
  va_start(va, format);
  vfprintf(stderr, format, va);
  va_end(va);
  fprintf(stderr, "\n");

  exit(EXIT_FAILURE);
}


void err_lib_error(const char *format, const char *extra)
{
  if (err_format)
    free(err_format);
  if (err_extra)
    free(err_extra);

  err_format = malloc(1 + strlen(format));
  err_extra  = malloc(1 + strlen(extra));
  if (err_format)
    sprintf(err_format, "%s", format);
  if (err_extra)
    sprintf(err_extra, "%s", extra);
}


char *err_get_error_fmt(void)
{
  return err_inited ? err_format : NULL;
}


char *err_get_error_extra(void)
{
  return err_inited ? err_extra : NULL;
}
