/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 * 
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 * 
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */
/*
  Title:        maxalloc - Grab as much memory as we can at one go.
  Status:       C Library Extension
  Copyright:    (C) 1988, Acorn Computers Ltd., Cambridge, England.
  $Revision: 1.1 $  LDS 11-Mar-88
*/

#ifndef __maxalloc_h
#define __maxalloc_h

#ifndef VoidStar
#  ifdef __STDC__
#    define VoidStar  void *
#  else
#    define VoidStar  char *
#  endif
#endif

extern VoidStar maxalloc(long *ask_get);
/*
 * One entry, *ask_get contains a requested size.
 * On exit, *ask_get is updated to contain the amount got.
 * maxalloc returns a pointer to the gotten memory.
 * In the event of error, NULL is returned and *ask_get is set to 0.
 */

#endif
