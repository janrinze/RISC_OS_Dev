/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 * 
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 * 
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */
/*
  Title:     Code to support mapping symbols
  $Revision: 1.2 $  LDS 16-Jan-91
*/

#ifndef __mapping_h
#define __mapping_h

#include "CLX/aof_.h"

typedef struct
{
    unsigned32 base;
    unsigned32 size;
    int type;
} map_entry;

typedef struct
{
    unsigned32 last_base;
    unsigned32 last_size;
    int last_entry;
    int last_type;
    int entries;
    map_entry entry[1];
} symbol_map;

symbol_map *mapping_init(const char *areaname, int32 attributes,
                         unsigned32 base, const char *strt,
                         const aof_symbol *symt, int nsyms);
/*
 * Prepare a map for an area. For the area, pass in the name,
 * the attributes and the base address from the area header.
 * Pass in the object file's symbol table by symt and nsyms.
 * Pass in the string table as strt.
 */

const map_entry *mapping_region(symbol_map *map, unsigned32 addr);
/*
 * Return the region enclosing the address addr. Addr should
 * either be the offset within the area, or the absolute
 * address if an absolute area. The returned entry will give
 * the base address of the enclosing area, and its size (the last
 * area will have size 0xFFFFFFFF). The type will be one of
 * 'a', 'd' or 't'.
 */

void mapping_final(symbol_map *map);
/*
 * Free the symbol map.
 */

#endif
